diff --git a/v8/src/libsampler/sampler.h b/v8/src/libsampler/sampler.h
index 6ce6798..75f6029 100644
--- a/v8/src/libsampler/sampler.h
+++ b/v8/src/libsampler/sampler.h
@@ -20,7 +20,7 @@ namespace sampler {
 // (if used for profiling) the program counter and stack pointer for
 // the thread that created it.
 
-class Sampler {
+class __attribute__((visibility("default"))) Sampler {
  public:
   static const int kMaxFramesCountLog2 = 8;
   static const unsigned kMaxFramesCount = (1u << kMaxFramesCountLog2) - 1;
diff --git a/v8/src/setup-isolate.h b/v8/src/setup-isolate.h
index 1cdc9c9..b5640bc 100644
--- a/v8/src/setup-isolate.h
+++ b/v8/src/setup-isolate.h
@@ -26,7 +26,7 @@ class Interpreter;
 // The actual implementations of generation of builtins and handlers is in
 // setup-builtins-internal.cc and setup-interpreter-internal.cc, and is
 // linked in by the latter two Delegate implementations.
-class SetupIsolateDelegate {
+class __attribute__((visibility("default"))) SetupIsolateDelegate {
  public:
   SetupIsolateDelegate() {}
   virtual ~SetupIsolateDelegate() {}
diff --git a/v8/src/snapshot/natives-external.cc b/v8/src/snapshot/natives-external.cc
index 9439f45..1eb8fb4 100644
--- a/v8/src/snapshot/natives-external.cc
+++ b/v8/src/snapshot/natives-external.cc
@@ -147,7 +147,7 @@ static StartupData* natives_blob_ = NULL;
 /**
  * Read the Natives blob, as previously set by SetNativesFromFile.
  */
-void ReadNatives() {
+V8_EXPORT_PRIVATE void ReadNatives() {
   if (natives_blob_ && NativesHolder<CORE>::empty()) {
     SnapshotByteSource bytes(natives_blob_->data, natives_blob_->raw_size);
     NativesHolder<CORE>::set(NativesStore::MakeFromScriptsSource(&bytes));
@@ -163,7 +163,7 @@ void ReadNatives() {
  * Set the Natives (library sources) blob, as generated by js2c + the build
  * system.
  */
-void SetNativesFromFile(StartupData* natives_blob) {
+V8_EXPORT_PRIVATE void SetNativesFromFile(StartupData* natives_blob) {
   DCHECK(!natives_blob_);
   DCHECK(natives_blob);
   DCHECK(natives_blob->data);
@@ -177,7 +177,7 @@ void SetNativesFromFile(StartupData* natives_blob) {
 /**
  * Release memory allocated by SetNativesFromFile.
  */
-void DisposeNatives() {
+V8_EXPORT_PRIVATE void DisposeNatives() {
   NativesHolder<CORE>::Dispose();
   NativesHolder<EXTRAS>::Dispose();
   NativesHolder<EXPERIMENTAL_EXTRAS>::Dispose();
diff --git a/v8/src/snapshot/natives.h b/v8/src/snapshot/natives.h
index 79f7db3..b8e867a 100644
--- a/v8/src/snapshot/natives.h
+++ b/v8/src/snapshot/natives.h
@@ -35,18 +35,18 @@ class V8_EXPORT_PRIVATE NativesCollection {
   // The following methods are implemented in js2c-generated code:
 
   // Number of built-in scripts.
-  static int GetBuiltinsCount();
+  V8_EXPORT_PRIVATE static int GetBuiltinsCount();
   // Number of debugger implementation scripts.
-  static int GetDebuggerCount();
+  V8_EXPORT_PRIVATE static int GetDebuggerCount();
 
   // These are used to access built-in scripts.  The debugger implementation
   // scripts have an index in the interval [0, GetDebuggerCount()).  The
   // non-debugger scripts have an index in the interval [GetDebuggerCount(),
   // GetNativesCount()).
-  static int GetIndex(const char* name);
-  static Vector<const char> GetScriptSource(int index);
-  static Vector<const char> GetScriptName(int index);
-  static Vector<const char> GetScriptsSource();
+  V8_EXPORT_PRIVATE static int GetIndex(const char* name);
+  V8_EXPORT_PRIVATE static Vector<const char> GetScriptSource(int index);
+  V8_EXPORT_PRIVATE static Vector<const char> GetScriptName(int index);
+  V8_EXPORT_PRIVATE static Vector<const char> GetScriptsSource();
 };
 
 typedef NativesCollection<CORE> Natives;
diff --git a/v8/src/snapshot/snapshot-external.cc b/v8/src/snapshot/snapshot-external.cc
index 67dcb60..c5a0d9d 100644
--- a/v8/src/snapshot/snapshot-external.cc
+++ b/v8/src/snapshot/snapshot-external.cc
@@ -22,7 +22,7 @@ namespace internal {
 static base::LazyMutex external_startup_data_mutex = LAZY_MUTEX_INITIALIZER;
 static v8::StartupData external_startup_blob = {NULL, 0};
 
-void SetSnapshotFromFile(StartupData* snapshot_blob) {
+V8_EXPORT_PRIVATE void SetSnapshotFromFile(StartupData* snapshot_blob) {
   base::LockGuard<base::Mutex> lock_guard(
       external_startup_data_mutex.Pointer());
   DCHECK(snapshot_blob);
@@ -34,7 +34,7 @@ void SetSnapshotFromFile(StartupData* snapshot_blob) {
 }
 
 
-const v8::StartupData* Snapshot::DefaultSnapshotBlob() {
+V8_EXPORT_PRIVATE const v8::StartupData* Snapshot::DefaultSnapshotBlob() {
   base::LockGuard<base::Mutex> lock_guard(
       external_startup_data_mutex.Pointer());
   return &external_startup_blob;
