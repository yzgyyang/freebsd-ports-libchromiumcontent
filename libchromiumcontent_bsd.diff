--- a/gpu/config/gpu_info_collector.cc	2018-01-17 12:01:25.925404000 +0400
+++ b/gpu/config/gpu_info_collector.cc	2018-01-17 13:15:38.379464000 +0400
@@ -197,6 +197,8 @@
 #if !defined(OS_BSD)
   IdentifyActiveGPU(gpu_info);
   return CollectDriverInfoGL(gpu_info);
+#else
+  return kCollectInfoNonFatalFailure;
 #endif
 }
 
--- a/net/proxy/proxy_config_service_linux.cc	2018-01-17 12:01:26.042540000 +0400
+++ b/net/proxy/proxy_config_service_linux.cc	2018-01-17 13:32:24.510689000 +0400
@@ -857,7 +857,7 @@
   return true;
 }
 #endif  // defined(USE_GIO)
-
+#if !defined(OS_BSD)
 // Converts |value| from a decimal string to an int. If there was a failure
 // parsing, returns |default_value|.
 int StringToIntOrDefault(base::StringPiece value, int default_value) {
@@ -867,7 +867,6 @@
   return default_value;
 }
 
-#if !defined(OS_BSD)
 // This is the KDE version that reads kioslaverc and simulates gconf.
 // Doing this allows the main Delegate code, as well as the unit tests
 // for it, to stay the same - and the settings map fairly well besides.
--- a/content/browser/memory/memory_coordinator_impl.cc	2018-01-17 12:01:25.790529000 +0400
+++ b/content/browser/memory/memory_coordinator_impl.cc	2018-01-17 13:55:25.719052000 +0400
@@ -123,6 +123,8 @@
   static MemoryCoordinatorImpl* instance = new MemoryCoordinatorImpl(
       base::ThreadTaskRunnerHandle::Get(), CreateMemoryMonitor());
   return instance;
+#else
+  return nullptr;
 #endif
 }

--- a/content/browser/memory/swap_metrics_observer_linux.cc	2018-01-17 12:01:25.793435000 +0400
+++ b/content/browser/memory/swap_metrics_observer_linux.cc	2018-01-17 14:09:15.274251000 +0400
@@ -17,6 +17,8 @@
   if (!base::GetSystemMemoryInfo(&memory_info))
     return false;
   return memory_info.swap_total > 0;
+#else  
+  return false;
 #endif
 }

@@ -37,11 +37,15 @@
 
 void SwapMetricsObserverLinux::UpdateMetricsInternal(base::TimeDelta interval) {
   base::SystemMemoryInfoKB memory_info;
+#if !defined(OS_BSD)
   if (!base::GetSystemMemoryInfo(&memory_info)) {
     Stop();
     return;
   }
-
+#else
+  Stop();
+  return;
+#endif
   double in_counts = memory_info.pswpin - last_pswpin_;
   double out_counts = memory_info.pswpout - last_pswpout_;
   last_pswpin_ = memory_info.pswpin;
--- a/content/browser/ppapi_plugin_process_host.cc	2018-01-17 12:01:25.794870000 +0400
+++ b/content/browser/ppapi_plugin_process_host.cc	2018-01-17 14:35:23.524521000 +0400
@@ -59,7 +59,7 @@
     : public content::SandboxedProcessLauncherDelegate {
  public:
   explicit PpapiPluginSandboxedProcessLauncherDelegate(bool is_broker)
-#if (defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)) || \
+#if (defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && !defined(OS_BSD)) || \
     defined(OS_WIN)
       : is_broker_(is_broker)
 #endif
@@ -123,7 +123,7 @@
   }
 
  private:
-#if (defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID)) || \
+#if (defined(OS_POSIX) && !defined(OS_MACOSX) && !defined(OS_ANDROID) && !defined(OS_BSD)) || \
     defined(OS_WIN)
   bool is_broker_;
 #endif
--- a/third_party/pdfium/fpdfsdk/javascript/JS_Value.cpp	2018-01-17 12:01:26.191229000 +0400
+++ b/third_party/pdfium/fpdfsdk/javascript/JS_Value.cpp	2018-01-17 15:50:26.721316000 +0400
@@ -45,7 +45,7 @@
   _get_timezone(&timezone);
 #endif
 #ifdef __FreeBSD__
-  struct tm *lt;
+  struct tm *lt = localtime(&t);
   return (double)(-(lt->tm_gmtoff * 1000));
 #else
   return (double)(-(timezone * 1000));
--- a/chrome/common/chrome_paths.cc	2018-01-17 12:01:25.647251000 +0400
+++ b/chrome/common/chrome_paths.cc	2018-01-17 16:19:51.264791000 +0400
@@ -60,11 +60,12 @@
 #else
     FILE_PATH_LITERAL("/usr/local/share/chromium/extensions");
 #endif  // defined(GOOGLE_CHROME_BUILD)
-
+#if defined(OS_LINUX)
 // The path to the hint file that tells the pepper plugin loader
 // where it can find the latest component updated flash.
 const base::FilePath::CharType kComponentUpdatedFlashHint[] =
     FILE_PATH_LITERAL("latest-component-updated-flash");
+#endif
 #endif  // defined(OS_LINUX)
 
 #if defined(OS_CHROMEOS)

